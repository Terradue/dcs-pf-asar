<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:redirect="http://xml.apache.org/xalan/redirect"
  extension-element-prefixes="redirect">

  <xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />

  <xsl:param name="level0.start" />
  <xsl:param name="level0.stop" />
  <xsl:param name="output.dir" />

  <xsl:template match="/">
    <redirect:open file="{$output.dir}/joborder.sh" />
    <redirect:write file="{$output.dir}/joborder.sh">#!/bin/env bash

#   script generated by Terradue IPF
#   Copyright (c) 2012 Terradue srl
</redirect:write>

    <xsl:apply-templates select="Task_Table" />

    <redirect:close file="{$output.dir}/joborder.sh"/>
  </xsl:template>

  <xsl:template match="Task_Table">
    <Ipf_Job_Order>
      <Ipf_Conf>
        <xsl:copy-of select="Processor_Name" />
        <xsl:copy-of select="Version" />
        <Order_Type>OFFL</Order_Type>
        <Logging_Level>INFO</Logging_Level>
        <xsl:apply-templates select="Test" />
        <Troubleshooting>false</Troubleshooting>
        <Processing_Station>GPOD</Processing_Station>
        <Config_Files>
          <Geophysical_Constants>Geophysical_Constants</Geophysical_Constants>
        </Config_Files>

        <Sensing_Time>
          <Start><xsl:value-of select="$level0.start" /></Start>
          <Stop><xsl:value-of select="$level0.stop" /></Stop>
        </Sensing_Time>
      </Ipf_Conf>

      <xsl:apply-templates select="Processing_Parameters" />

      <xsl:apply-templates select="List_of_Pools/Pool/List_of_Tasks" />
      <Processor_Conf>
        <File_Name />
      </Processor_Conf>
    </Ipf_Job_Order>
  </xsl:template>

  <xsl:template match="Test['No' = text()]">
    <Test>false</Test>
  </xsl:template>

  <xsl:template match="Test['Yes' = text()]">
    <Test>true</Test>
  </xsl:template>

  <xsl:template match="Processing_Parameters">
    <Processing_Parameters>
      <xsl:attribute name="count"><xsl:value-of select="count(descendant::Processing_Parameter)" /></xsl:attribute>
      <xsl:copy-of select="Processing_Parameter" />
    </Processing_Parameters>
  </xsl:template>

  <xsl:template match="List_of_Tasks">
    <List_of_Ipf_Procs>
      <xsl:attribute name="count"><xsl:value-of select="count(descendant::Task)" /></xsl:attribute>

      <xsl:apply-templates select="Task" />
    </List_of_Ipf_Procs>
  </xsl:template>

  <xsl:template match="Task">
    <redirect:write file="{$output.dir}/joborder.sh">
#   <xsl:value-of select="Name" /> - <xsl:value-of select="Version" />
csh <xsl:value-of select="File_Name" /> \
    <xsl:value-of select="$output.dir" />/joborder.xml
</redirect:write>

    <Ipf_Proc>
      <Task_Name><xsl:value-of select="Name" /></Task_Name>
      <Task_Version><xsl:value-of select="Version" /></Task_Version>

      <xsl:apply-templates select="List_of_Breakpoints" />

      <xsl:apply-templates select="List_of_Inputs" />
      <xsl:apply-templates select="List_of_Outputs" />
    </Ipf_Proc>
  </xsl:template>

  <xsl:template match="List_of_Breakpoints[@count != 0]">
    <Breakpoint>
      <Enable>ON</Enable>
      <List_of_Brk_Files>
        <xsl:attribute name="count"><xsl:value-of select="@count" /></xsl:attribute>
        <xsl:apply-templates select="Breakpoint" />
      </List_of_Brk_Files>
    </Breakpoint>
  </xsl:template>

  <xsl:template match="Breakpoint">
    <Brk_File>
      <File_Type></File_Type>
      <File_Name_Type>Physical</File_Name_Type>
      <File_Name><xsl:value-of select="." /></File_Name>
    </Brk_File>
  </xsl:template>

  <xsl:template match="List_of_Breakpoints">
    <Breakpoint>
      <Enable>OFF</Enable>
      <List_of_Brk_Files count="0" />
    </Breakpoint>
  </xsl:template>

  <xsl:template match="List_of_Inputs">
    <List_of_Inputs>
      <xsl:attribute name="count"><xsl:value-of select="count(descendant::Input)" /></xsl:attribute>
      <xsl:apply-templates select="Input" />
    </List_of_Inputs>
  </xsl:template>

  <xsl:template match="Input">
    <Input>
      <xsl:copy-of select="List_of_Alternatives/Alternative/*" />
    </Input>
  </xsl:template>

  <xsl:template match="List_of_Outputs">
    <List_of_Outputs>
      <xsl:attribute name="count"><xsl:value-of select="count(descendant::Output)" /></xsl:attribute>
      <xsl:apply-templates select="Output" />
    </List_of_Outputs>
  </xsl:template>

  <xsl:template match="Output">
    <Output>
      <xsl:copy-of select="File_Type" />
      <xsl:copy-of select="File_Name_Type" />
      <File_Name><xsl:value-of select="$output.dir" />/<xsl:value-of select="File_Type" /></File_Name>
    </Output>
  </xsl:template>

</xsl:stylesheet>
